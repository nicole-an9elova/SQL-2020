SET SCHEMA FN71871$
CREATE OR REPLACE MODULE FN71871.COURSE_PROJECT$

--1st procedure - procedure with while and cursors
ALTER MODULE FN71871.COURSE_PROJECT PUBLISH PROCEDURE CALCULATE_TOTAL_PRICE(IN V_CUSTOMER_ID CHAR(7))
BEGIN
	DECLARE SQLCODE INT;
	DECLARE TEMP_TOTAL_PRICE DECIMAL(7,2) DEFAULT 0;
	DECLARE USED_ORDER_ID CHAR(8);
	DECLARE USED_VOUCHER CHAR(8);
	DECLARE DISCOUNT_PERC INTEGER;
	
	DECLARE CUSTOMER ANCHOR ROW FN71871.N7_SHOPPING_CART;

	DECLARE CURR CURSOR WITH RETURN FOR SELECT * FROM FN71871.N7_SHOPPING_CART WHERE FN71871.N7_SHOPPING_CART.CUSTOMER_ID = V_CUSTOMER_ID;
	
	SET USED_ORDER_ID = (SELECT ORDER_ID
						 FROM FN71871.N10_ORDER
						 WHERE ORDER_PAYMENT_ID IN 
						 						(SELECT PAYMENT_ID
						 						 FROM FN71871.N9_PAYMENT
						 						 WHERE SHOPPING_CART_ID IN 
						 						 						(SELECT SHOPPING_CART_ID
						 						 						FROM FN71871.N7_SHOPPING_CART
						 						 						WHERE CUSTOMER_ID = V_CUSTOMER_ID)));
	
	SET USED_VOUCHER = (SELECT USED_VOUCHER_ID 
						FROM FN71871.N9_PAYMENT 
						WHERE PAYMENT_ID IN 
										(SELECT ORDER_PAYMENT_ID
										 FROM FN71871.N10_ORDER
										 WHERE ORDER_ID = USED_ORDER_ID));
	
	OPEN CURR; 
	
	FETCH CURR INTO CUSTOMER;
	WHILE SQLCODE = 0 DO			
		SET TEMP_TOTAL_PRICE = TEMP_TOTAL_PRICE + (CUSTOMER.PRICE * CUSTOMER.QUANTITY);
		FETCH CURR INTO CUSTOMER;
	END WHILE;
	
	SET DISCOUNT_PERC = (SELECT DISCOUNT_PER FROM FN71871.N8_VOUCHER WHERE USED_VOUCHER = FN71871.N8_VOUCHER.VOUCHER_ID);
	
	UPDATE FN71871.N10_ORDER
	SET TOTAL_PRICE = TEMP_TOTAL_PRICE - ((DISCOUNT_PERC / 100.0) * TEMP_TOTAL_PRICE)
	WHERE FN71871.N10_ORDER.ORDER_ID = USED_ORDER_ID;
						
	CLOSE CURR;

END $

ALTER MODULE FN71871.COURSE_PROJECT
DROP PROCEDURE CALCULATE_TOTAL_PRICE$

CALL FN71871.COURSE_PROJECT.CALCULATE_TOTAL_PRICE('7532008')$
CALL FN71871.COURSE_PROJECT.CALCULATE_TOTAL_PRICE('9875851')$


--2nd procedure - procedure with condition handling
ALTER MODULE FN71871.COURSE_PROJECT PUBLISH PROCEDURE UPDATE_ORDER_STATUS(IN V_CUSTOMER_ID CHAR(7))
BEGIN
	DECLARE AT_END INTEGER DEFAULT 0;
	DECLARE ACC_ORDER_ID CHAR(8); 
	DECLARE ORD ANCHOR ROW FN71871.N10_ORDER;
	
	DECLARE NOT_FOUND CONDITION FOR SQLSTATE '02000';
	DECLARE INVALID_CUSTOMER_ID CONDITION FOR SQLSTATE '42884';
	DECLARE WRONG_ORDER CONDITION FOR SQLSTATE '22003'; 

	DECLARE CURR_ORDER CURSOR WITH RETURN FOR SELECT * FROM FN71871.N10_ORDER WHERE FN71871.N10_ORDER.ORDER_ID = ACC_ORDER_ID;

	
	DECLARE CONTINUE HANDLER FOR INVALID_CUSTOMER_ID
		RESIGNAL SET MESSAGE_TEXT = 'This user ID does not exist!';
	DECLARE CONTINUE HANDLER FOR WRONG_ORDER
		RESIGNAL SET MESSAGE_TEXT = 'Something went wrong with the delivery!';
	DECLARE CONTINUE HANDLER FOR NOT_FOUND
		SET AT_END = 1;
	
	SET ACC_ORDER_ID = (SELECT ORDER_ID
						 FROM FN71871.N10_ORDER
						 WHERE ORDER_PAYMENT_ID IN 
						 						(SELECT PAYMENT_ID
						 						 FROM FN71871.N9_PAYMENT
						 						 WHERE SHOPPING_CART_ID IN 
						 						 						(SELECT SHOPPING_CART_ID
						 						 						FROM FN71871.N7_SHOPPING_CART
						 						 						WHERE CUSTOMER_ID = V_CUSTOMER_ID)));
						 						 						
					 						 							
	OPEN CURR_ORDER;
	IF V_CUSTOMER_ID NOT IN(SELECT USER_ID FROM FN71871.N6_USER) THEN SIGNAL INVALID_CUSTOMER_ID;
	ELSE 
		L1: LOOP
			FETCH CURR_ORDER INTO ORD;
			IF AT_END = 1 THEN LEAVE L1;
			ELSEIF (ORD.STATE_OF_ORDER IN ('ERROR', 'IN PROCESS', 'SENT')) THEN
				IF (ORD.DATE_ORDERED = CURRENT_DATE OR CURRENT_DATE - ORD.DATE_ORDERED < 3 ) THEN
					UPDATE FN71871.N10_ORDER
					SET STATE_OF_ORDER = 'IN PROCESS'
					WHERE ACC_ORDER_ID = FN71871.N10_ORDER.ORDER_ID;
				ELSEIF (CURRENT_DATE - ORD.DATE_ORDERED > 2  AND  CURRENT_DATE - ORD.DATE_ORDERED < 6)  THEN
					UPDATE FN71871.N10_ORDER
					SET STATE_OF_ORDER = 'SENT'
					WHERE ACC_ORDER_ID = FN71871.N10_ORDER.ORDER_ID;
				ELSEIF (CURRENT_DATE - ORD.DATE_ORDERED > 5  AND  CURRENT_DATE - ORD.DATE_ORDERED < 10)  THEN
					UPDATE FN71871.N10_ORDER
					SET STATE_OF_ORDER = 'DELIVERED'
					WHERE ACC_ORDER_ID = FN71871.N10_ORDER.ORDER_ID;
				ELSE SIGNAL WRONG_ORDER;
				END IF;
			END IF;
		END LOOP; 
	END IF;
	
	CLOSE CURR_ORDER;

END $

ALTER MODULE FN71871.COURSE_PROJECT
DROP PROCEDURE UPDATE_ORDER_STATUS$


CALL FN71871.COURSE_PROJECT.UPDATE_ORDER_STATUS('9875841')$
CALL FN71871.COURSE_PROJECT.UPDATE_ORDER_STATUS('7532008')$

--3rd procedure - procedure with cursor and in, and out vars
ALTER MODULE FN71871.COURSE_PROJECT PUBLISH PROCEDURE UPDATE_MONTHLY_SALARY(IN V_EMP_ID CHAR(6), OUT V_HIRE_DATE DATE, OUT V_JOB VARCHAR(20), OUT OLD_SALARY DECIMAL(8, 2), OUT NEW_SALARY DECIMAL(8, 2))
RESULT SETS 1
BEGIN
	DECLARE EMP_INFO ANCHOR ROW FN71871.N2_EMPLOYEE;
	
	DECLARE CURR_EMPL CURSOR WITH RETURN FOR SELECT * FROM FN71871.N2_EMPLOYEE WHERE FN71871.N2_EMPLOYEE.EMP_ID = V_EMP_ID;
			
	OPEN CURR_EMPL;
	
	FETCH CURR_EMPL INTO EMP_INFO;
	SET V_HIRE_DATE = EMP_INFO.HIRE_DATE;
	SET V_JOB = EMP_INFO.EMP_JOB;
	SET OLD_SALARY = EMP_INFO.SALARY;
	
	IF V_JOB = 'MANAGER' THEN
		UPDATE FN71871.N2_EMPLOYEE
		SET SALARY = SALARY + 300 WHERE FN71871.N2_EMPLOYEE.EMP_ID = V_EMP_ID;
		SET NEW_SALARY = EMP_INFO.SALARY + 300;
	ELSEIF V_JOB IN ('ACCOUNTANT', 'LAWYER')  THEN
		UPDATE FN71871.N2_EMPLOYEE
		SET SALARY = SALARY + 220 WHERE FN71871.N2_EMPLOYEE.EMP_ID = V_EMP_ID;
		SET NEW_SALARY = EMP_INFO.SALARY + 220;
	ELSEIF V_JOB IN ('ANALYST', 'CLERK', 'FIELDREP') THEN
		UPDATE FN71871.N2_EMPLOYEE
		SET SALARY = SALARY + 130 WHERE FN71871.N2_EMPLOYEE.EMP_ID = V_EMP_ID;
		SET NEW_SALARY = EMP_INFO.SALARY + 130;
	ELSE
		UPDATE FN71871.N2_EMPLOYEE
		SET SALARY = SALARY + 170 WHERE FN71871.N2_EMPLOYEE.EMP_ID = V_EMP_ID;
		SET NEW_SALARY = EMP_INFO.SALARY + 170;
	END IF;
	
	
	CLOSE CURR_EMPL;
END $

ALTER MODULE FN71871.COURSE_PROJECT
DROP PROCEDURE UPDATE_MONTHLY_SALARY$

CALL FN71871.COURSE_PROJECT.UPDATE_MONTHLY_SALARY('000080', ?, ?, ?, ?)$

--++++ procedure
ALTER MODULE FN71871.COURSE_PROJECT PUBLISH PROCEDURE UPDATE_BOOK_STOCK(IN V_ISBN CHAR(13), IN V_QUANTITY INTEGER)
BEGIN
	DECLARE SQLCODE INT;
	DECLARE V_BOOK ANCHOR ROW FN71871.N5_BOOK;
	
	DECLARE CURR_STOCK CURSOR WITH RETURN FOR SELECT * FROM FN71871.N5_BOOK WHERE V_ISBN = FN71871.N5_BOOK.ISBN;
	
	OPEN CURR_STOCK;
	FETCH CURR_STOCK INTO V_BOOK;
	WHILE SQLCODE = 0 DO
		UPDATE FN71871.N5_BOOK
		SET COPIES_IN_STOCK = COPIES_IN_STOCK - V_QUANTITY
		WHERE FN71871.N5_BOOK.ISBN = V_ISBN;
		FETCH CURR_STOCK INTO V_BOOK;
	END WHILE;
	CLOSE CURR_STOCK;

END $

ALTER MODULE FN71871.COURSE_PROJECT
DROP PROCEDURE UPDATE_BOOK_STOCK$

CALL FN71871.COURSE_PROJECT.UPDATE_BOOK_STOCK('9781607747307', 2)$

--++++ PROCEDURE
ALTER MODULE FN71871.COURSE_PROJECT PUBLISH PROCEDURE UPDATE_BOOKS_IN_A_CATEGORY(IN V_GENRE_ID CHAR(2))
BEGIN
	DECLARE SQLCODE INT;
	DECLARE V_CATEGORY ANCHOR ROW FN71871.N4_CATEGORY;
	
	DECLARE C1 CURSOR WITH RETURN FOR SELECT * FROM FN71871.N4_CATEGORY WHERE V_GENRE_ID = FN71871.N4_CATEGORY.CATEGORY_ID;
	
	OPEN C1;
	FETCH C1 INTO V_CATEGORY;
	WHILE SQLCODE = 0 DO
		UPDATE FN71871.N4_CATEGORY
		SET NUM_OF_COPIES = NUM_OF_COPIES + 1
		WHERE FN71871.N4_CATEGORY.CATEGORY_ID = V_GENRE_ID;
		FETCH C1 INTO V_CATEGORY;
	END WHILE;
	CLOSE C1;

END $






